### 度量指标总结  

#### 1. 评估指标  
**a) 加速比 (Speedup)**  
- **衡量方面**：比较编译器生成代码与基准库（SuiteSparse:GraphBLAS或LAGraph）的性能差异，反映优化后的计算效率提升。  
  - **具体用例**：  
    - 半环操作（Semiring）性能：最高达3.7倍加速（输出为乱序矩阵时）。  
    - SpGEMM操作：几何平均加速1.48倍，最高2.19倍。  
    - TC算法：不同算法几何平均加速1.54×–1.91×，最高2.52×。  
    - BFS算法：几何平均加速2.57倍，最高9.05倍。  

**b) 几何平均加速比 (Geometric Mean Speedup)**  
- **衡量方面**：综合评估多组输入数据下的稳定性能提升，避免极端值影响。  

**c) 并行性能增益 (Parallel Performance Gain)**  
- **衡量方面**：多线程（24线程）下的并行效率，如TC算法最高4.63倍加速，大型输入（Orkut、LiveJournal）最高2.02倍加速。  

**d) 优化贡献分解 (Performance Benefit Breakdown)**  
- **衡量方面**：量化各优化技术（工作区变换、掩码优化、半环替换）对性能的独立贡献。  
  - **示例**：工作区变换带来20.60倍基础加速，掩码优化额外提升1.86倍；半环替换（plus-pair）提升约5%。  

#### 2. 选取理由  
- **针对性对比需求**：选择与广泛使用的基准库（SuiteSparse:GraphBLAS/LAGraph）对比，直接证明编译器的优化效果。  
- **覆盖关键操作**：SpGEMM、半环操作、TC/BFS算法是稀疏线性代数和图算法的核心操作，其性能代表实际应用价值。  
- **多维度评估**：  
  - **单线程与并行**：验证编译器在不同执行模式下的适应性。  
  - **输入敏感性分析**：通过不同稀疏度矩阵（如bcsstk17高密度、Orkut大规模稀疏）测试鲁棒性。  
- **优化可解释性**：通过分阶段量化各优化技术的贡献（如工作区变换>掩码>半环），明确技术改进点。  

#### 补充说明  
- **隐式指标**：内存效率（如掩码优化降低内存压力）虽未直接量化，但通过能否运行大型输入（LiveJournal/Orkut）间接体现。