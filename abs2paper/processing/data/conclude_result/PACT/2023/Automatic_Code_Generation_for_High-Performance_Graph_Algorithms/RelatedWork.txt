相关工作总结：

1、现有方法一：Graph Libraries（图计算库）
核心思想: 提供基于不同串行/并行算法的高性能图核实现，例如LAGraph（基于SuiteSparse:GraphBLAS的稀疏线性代数运算）和NW-Graph（利用C++20特性的高性能头文件库）。
主要局限性: 
- 各库采用独立的优化方法，受限于特定编程模型
- 缺乏统一的跨模型代码生成方案

2、现有方法二：Domain-Specific Compilers（领域专用编译器）
核心思想: 通过专用编译器（如Green-Marl/GraphIt/TACO）实现图算法中稀疏操作的代码生成，其中TACO采用DSL到C++的源到源转换技术。
主要局限性:
- TACO等编译器缺乏并行稀疏计算支持（如并行SpGEMM）
- 优化重点集中在串行代码层面
- 部分系统（如COMET）未充分利用MLIR最新特性（如sparse-tensor方言）

3、现有方法三：MLIR-based Approaches（基于MLIR的基础设施）
核心思想: 利用MLIR框架的sparse-tensor方言支持稀疏张量计算，如mlir-graphBLAS项目计划降级到linalg方言。
主要局限性:
- 早期实现（如SCF方言层面的代码生成）缺乏工作空间变换等优化
- 现有方案与新兴MLIR特性的整合不足

研究缺口：
1) 跨编程模型的统一优化方案缺失
2) 并行稀疏计算支持不完善
3) MLIR新特性在图形算法中的系统性优化应用不足
4) 工作空间变换等高级优化技术的集成需求