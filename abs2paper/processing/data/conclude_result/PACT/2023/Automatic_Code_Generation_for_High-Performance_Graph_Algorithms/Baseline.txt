Baseline选取总结：  
1、对比方法:  
- **LAGraph**（基于SuiteSparse:GraphBLAS库实现）  
- **SuiteSparse:GraphBLAS**（直接调用库函数）  

2、选取理由:  
- **技术代表性**：LAGraph是当前基于线性代数的图算法实现的代表性开源库，其底层依赖SuiteSparse:GraphBLAS这一高性能稀疏线性代数库，二者共同覆盖了传统库优化方法的典型技术路线。  
- **SOTA对比需求**：论文的核心目标是验证编译器生成代码的性能优势，因此选择当前领域广泛使用且性能优化的成熟库（SuiteSparse:GraphBLAS）作为直接对比基准，确保实验结果的客观性和竞争力。  
- **应用场景覆盖**：LAGraph提供了多种图算法（如TC、BFS）的标准化实现，与论文实验涉及的算法高度匹配，便于在相同输入和条件下进行公平比较。  
- **优化方法验证**：通过对比不同稀疏操作（如SpGEMM、masking）在两种Baseline中的表现，可系统分析编译器提出的工作区变换、半环优化等技术的实际收益。  

附加说明：论文还隐含对比了“未优化的基础实现”（如无工作区变换/掩码优化的SpGEMM+元素乘组合），但未列为独立Baseline，仅用于内部优化效果分解分析。