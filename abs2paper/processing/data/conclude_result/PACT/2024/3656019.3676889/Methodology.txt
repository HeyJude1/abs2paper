方法概述：  
1、方法名称: **PipeGen**  
2、核心思想: 通过编译器式的自动化分析及代码转换，将单核乱序执行流水线（设计时仅需考虑单线程正确性）自动转换为支持指定内存一致性模型（MCM）的多核流水线。核心直觉是：通过识别内存指令的关键状态和子操作，动态插入三种机制（按序执行、负载重放、无效跟踪）以强制满足MCM要求的顺序约束。  

3、主要流程/组件  
**组件/步骤一：按序内存指令（In-Order Memory Instructions, IO）**  
- **功能**: 强制两条内存指令按程序顺序执行。通过分析指令状态图，在M2的内存访问状态插入停滞逻辑，直到M1完成其内存操作后解除停滞。  
- **关键操作**:  
  - 识别M1的“内存完成状态”（如`WaitingForResponse`之后的状态）和M2的停滞点（如`ReadyToIssue`）。  
  - 在M2的停滞点添加查询逻辑，检查M1是否处于完成前状态；若未完成则停滞M2，并在M1完成时发送解除停滞信号。  

**组件/步骤二：负载重放（Load-Replay, LR）**  
- **功能**: 在提交阶段重放负载指令以验证其推测执行的正确性。若重放值与原始值不一致，触发推测恢复机制。  
- **关键操作**:  
  - 在负载提交时（`ReadyToCommit`），向内存系统重新发起请求并获取新值。  
  - 比较原始值（存储在如LQ的结构中）与重放值，差异时调用单核推测恢复逻辑。  

**组件/步骤三：无效跟踪（Invalidation Tracking, IT）**  
- **功能**: 监听一致性无效消息，若发现与已推测执行的负载地址匹配，则触发推测恢复。  
- **关键操作**:  
  - 新增结构`LoadTracker`记录推测负载的地址和序列号。  
  - 在收到无效消息时查询`LoadTracker`，匹配则清空追踪器并恢复流水线。  

---  
**关系说明**:  
- **输入依赖**: PipeGen要求用户使用DSL语言AQL描述流水线，并显式标记内存指令的规范状态（如`ReadyToIssue`）和子操作（如`issue_load_request`）。这些标签是分析的基础。  
- **机制选择**: 具体采用哪种机制（IO/LR/IT）由用户根据MCM需求指定（如x86TSO要求Store→Load顺序可通过IO或LR实现）。PipeGen通过静态分析（如可达性分析）确定需强制的顺序缺口，再应用对应转换逻辑。