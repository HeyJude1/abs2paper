实验设计总结：

1、核心目标:  
- 验证PipeGen生成的流水线能否正确强制执行指定的内存一致性模型（MCM）。  
- 分析不同流水线设计（Designs 1/2/3）、MCM（x86TSO和ARMv8）与强制执行机制（三种转换方法）的组合效果。  
- 评估自动化转换工具在解决流水线特化问题上的有效性（如避免死锁、正确选择执行顺序控制点）。

2、数据集:  
- **Litmus测试集**：包括多核排序测试用例（MP、Dekker's、LB、n7）及其变体，覆盖：  
  - **x86TSO**：7种测试（含`mfence`指令组合）。  
  - **ARMv8**：22种测试（含`LDAR`/`STLR`/`DMB`等屏障指令组合）。  

3、关键设置:  
- **验证工具**：Murphi模型检查器，用于穷举测试所有可能的指令交错。  
- **实验变量组合**：  
  - 3种流水线设计（Designs 1/2/3，差异见单线程执行顺序约束）。  
  - 2种MCM（x86TSO和ARMv8）。  
  - 3种转换方法组合（仅In-order内存指令；In-order+Load Replay；In-order+Invalidation Tracking）。  
- **关键参数**：每种MCM下共测试9组实验（3设计×3转换组合），总计63（x86TSO）和198（ARMv8）次Litmus测试。  

结构化补充说明：  
- **保守性分析**：结果中灰色单元格标识PipeGen生成的约束略强于目标MCM要求（如ARMv8的DMB-ST场景），黄色单元格标识设计本身限制导致的保守行为。  
- **输出验证**：所有生成流水线均未违反目标MCM，且自动化转换解决了手动实现可能存在的死锁问题（如Design-3中通过Issue Queue而非Load Buffer实施In-order控制）。