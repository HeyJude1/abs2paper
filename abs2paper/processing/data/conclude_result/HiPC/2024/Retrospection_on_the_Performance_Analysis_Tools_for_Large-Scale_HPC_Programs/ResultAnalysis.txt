实验结果分析总结：

1、主要发现:
- 数据收集方面：采样工具（如HPCToolkit）在收集所有类型函数事件时（不考虑函数参数）比插桩工具（如TAU-P和Scalasca-P）具有更低的时间开销。但对于MPI通信事件，插桩工具（TAU-T和Scalasca-T）由于能收集丰富的参数信息，更适合且时间开销可忽略。
- 存储开销方面：插桩工具由于高频事件数据收集导致存储开销更高，与函数调用次数成正比；而采样工具的存储开销与样本数成正比。
- 可视化分析方面：现有工具（如HPCToolkit和TAU）的跟踪可视化在16进程规模下已难以解读；Scalasca通过提取关键指标（如延迟发送/接收问题）提供更直观的性能问题诊断。
- 热点分析方面：HPCToolkit的调用栈树形视图最直观，TAU的扁平视图可接受，而Scalasca的热点展示方式不直观且难以识别关键代码区域。
- 可扩展性分析方面：HPCToolkit通过自定义可扩展性损失度量提供上下文洞察，但难以定位根本原因；TAU通过实测与理想加速比对比展示差距，但缺乏优化指导。

2、消融研究结论:
- 数据收集方法对比研究表明：计算事件更适合采样方法（低开销），通信事件更适合插桩方法（参数丰富）。单一方法无法兼顾全面性能分析与可接受开销（Pitfall 1）。
- 跟踪可视化对比揭示：直接展示原始跟踪数据混乱无意义，需通过异常区域高亮或机器学习技术提取关键指标（Pitfall 2）。
- 热点展示方式对比表明：仅提供性能统计不足够，需结合多维分析（如低效指令/数据结构）提供可操作优化建议（Pitfall 3）。

3、其他分析洞察:
- 性能方差分析发现：TAU通过ParaProf可直观识别异常MPI等待事件（如内存噪声注入节点），而HPCToolkit无法有效检测注入的干扰。
- 未来工具开发方向：
  1) 融合采样与插桩方法的混合数据收集策略；
  2) 通过机器学习自动识别大规模跟踪数据中的性能瓶颈；
  3) 结合图神经网络实现可扩展性问题的快速根因定位；
  4) 基于深度学习的时序异常检测技术分析性能方差。