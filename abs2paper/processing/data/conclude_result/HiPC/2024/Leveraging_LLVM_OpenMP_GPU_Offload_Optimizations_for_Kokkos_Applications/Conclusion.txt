结论与展望总结：  
1、**结论回顾**:  
   - 论文针对OpenMP在GPU卸载（offload）应用中存在的局限性（如缺乏动态共享内存支持、运行时库开销大等），提出了两项关键扩展：  
     (1) 支持线程组内动态共享内存分配；  
     (2) 允许以SIMT风格编写OpenMP代码。  
   - 这些扩展弥补了OpenMP与CUDA/HIP等原生框架的功能差距，并通过结合LLVM/OpenMP的额外优化（如shuffle指令）进一步提升了GPU上的归约操作性能。  
   - 通过集成到Kokkos框架的OpenMPTarget后端，验证了扩展的实用性：在NVIDIA和AMD GPU上，性能已达到与原生CUDA/HIP后端相当的水平。  

2、**工作局限性**:  
   - 论文未明确提及具体局限性，但隐含的潜在不足可能包括：  
     (1) 扩展功能目前仅限LLVM/OpenMP实现，尚未被OpenMP标准API采纳；  
     (2) 性能优化验证集中于特定框架（Kokkos），可能未覆盖更广泛的用例。  

3、**未来工作**:  
   - 推动OpenMP语言委员会将提出的扩展纳入标准API，以实现跨实现（非仅LLVM）的兼容性。  
   - 进一步探索在大型C++项目中应用OpenMP GPU卸载的可行性，强化性能可移植性支持。  

注：若需补充具体局限性分析，建议参考论文评估部分（如测试用例覆盖范围或硬件平台限制等未被总结的内容）。