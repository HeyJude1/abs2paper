2 MOTIVATION
CML faces severe portability and performance issues. Fig. compares the performance of sklearn, the most widely used CML framework on GitHub -against CMLCompiler leveraging DL compilers. We find that sklearn can not support GPUs and only supports IoT devices partially. Adding support for a new hardware device needs great effort due to the ad-hoc implementations. For example, adding support for random forest on GPU needs 2.7k lines of code . Many models and hardware devices need to be supported, requiring hundreds or thousands of more effort. Moreover, due to the lack of compilation support for CPU features, sklearn has poor performance. As shown in Fig. , CMLCompiler achieves 2.3x speedup by utilizing AVX2 through compilation compared with sklearn. Other CML frameworks such as Spark MLlib and H2O face the same problems. Our solution is to propose unified abstractions to utilize DL compilers and frameworks, achieving portability and high performance.
CML and DL models are often deployed hybrid in NLP , intelligent healthcare , recommendation systems , etc., especially in scenarios with limited computational power and small datasets. Many of them are deployed on heterogeneous hardware devices for online serving. As there is no unified system, different frameworks are deployed with three disadvantages. First, this limits the portability. If one framework fails on the target device, the whole pipeline corrupts. Second, there are extra costs due to data conversions across frameworks. Third, it is hard to make optimizations across different frameworks. Using a unified framework can overcome these disadvantages, so we add the support for hybrid deployment of CML and DL in CMLCompiler.