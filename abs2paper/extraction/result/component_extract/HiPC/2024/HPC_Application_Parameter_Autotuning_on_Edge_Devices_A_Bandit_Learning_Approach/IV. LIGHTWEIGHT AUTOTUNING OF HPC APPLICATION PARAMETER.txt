IV. LIGHTWEIGHT AUTOTUNING OF HPC APPLICATION PARAMETER
Here, we present the details of LASPa lightweight online HPC application parameter selection algorithm specifically focusing on edge devices. The algorithm is developed based on the MAB framework and tailored to optimize scientific application configurations by balancing execution time and power consumption to facilitate user participation. It systematically explores a defined configuration space, χ, that encompasses all possible combinations of input parameters for the application. The algorithm operates over a set number of iterations, T , and is calibrated using user-defined hyperparameters: weights for execution time (α) and power consumption (β). These weights dictate the algorithm's balance of execution time minimization vs. power consumption reduction. We normalize the execution time (τ ) and power consumption (ρ) based on the MinMax normalization technique. The normalized execution time τ x is calculated as: τ x = τ −τmin τmax−τmin , where τ min and τ max are minimum and maximum execution times, respectively. Similarly, the normalized power consumption ρ x is calculated as: ρ x = ρ−ρmin ρmax−ρmin , where ρ min and ρ max are minimum and maximum power consumption, respectively. The weighted reward function, f reward (x), integrates the normalized execution time and power consumption values. The reward for selecting a configuration x at iteration t, denoted as R x,t , is determined as follows:
f reward (x) = α × 1 µ(τ x ) + β × 1 µ(ρ x ) , ( 5
)
where R x = f reward (x) is the exploitation term, which is the weighted reward for configuration x. Eq. 5 ensures that the reward is inversely proportional to the normalized metrics of execution time and power consumption, thereby aligning with the user's optimization goals. The UCB in Alg. 1 dynamically balances the exploration of new configurations against exploiting those already known to be effective. The performance of our algorithm is evaluated based on the total reward accrued over T iterations. The expected total reward for a configuration x is determined considering the randomness in execution time, power consumption, and the algorithm's selection strategy and is defined as follows:
E[R x ] = E T t=1 R x,t . (6)
The total regret R n after n evaluations of a evaluations with K configurations is bounded by :
R n ≤ 8 log(n) i:µi<µ * 1 ∆ i + 1 + π 2 3 K i=1 ∆ i , (7)
where µ * denotes the highest expected reward (i.e., least execution time) among all configurations, µ i denotes the expected reward of the i-th configuration, and ∆ i = µ * − µ i is the difference between the maximum expected reward and the reward of the i-th configuration. The bound in Eq. 7 indicates that the regret grows logarithmically with the number of evaluations n, which means that the average regret per play R n /n tends to zero as n increases. This demonstrates the efficiency of the UCB-based approach in explorationexploitation scenarios.
LASP integrates smoothly with existing edge computing frameworks due to its application-agnostic architecture and compatibility with protocols like CoAP (Constrained Application Protocol) , enabling efficient communication and coordination between edge devices and HPC systems. However, challenges may arise from hardware differences, dynamic environments, and resource constraints on edge devices, particularly when tuning hardware-level parameters or maintaining real-time feedback. Addressing these requires careful protocol selection and configuration adjustments. As a modular algorithm, LASP can function independently or integrate with existing performance optimization components, as demonstrated in Section 10, showing its effectiveness on devices with varying computational capabilities.
Scalability Limitations: One limitation of LASP 's implementation is scalability. As the number of arms (configurations) increases, the UCB algorithm requires exploring a large number of options before it can intelligently determine the optimal configurations. This exploration becomes computationally intensive and inefficient, especially on resourceconstrained edge devices.
Network and Coordination issues: The presence of multiple volatile edge devices introduces additional challenges, particularly in terms of network issues. Low communication bandwidths between devices can hinder coordination and data transfer, impacting overall system efficiency.
Scalability with Heterogeneous edge devices: One of the most complex challenges arises when scaling LASP to handle heterogeneous edge devices. These devices often have varying computational power, memory, and network connectivity, which can impact the effectiveness of a one-size-fitsall algorithm like UCB. Handling diverse device capabilities requires adaptive algorithms that can dynamically adjust resource consumption, depending on the device's capabilities and environmental constraints. The varying performance characteristics across devices also increase the difficulty of ensuring that optimal configurations are found efficiently for each device. Future iterations of LASP will explore approaches like multi-level parallelism and resource-aware algorithm designs to better handle heterogeneous environments.