I. INTRODUCTION
Kokkos is a performance portability library that allows a single C++ code base to efficiently execute on diverse GPUs and CPUs . Many scientific applications, especially those developed via the United States Exascale Computing Project (ECP), use it as a programming model. The Linux Foundation assumed ownership of Kokkos to ensure lasting sustainability.
While the front end interface of Kokkos is modern ISO standard C++, its implementation provides several different backends depending on the target architecture. Backends using the vendor preferred programming models (NVIDIA's CUDA, AMD's HIP, and Intel's DPC++ dialect of SYCL) provide the best performance on each vendor's hardware. However, vendor preferred programming models are poorly supported, if at all, on the other vendors' hardware. OpenMP's device offload model provides an alternative to vendor preferred programming model backends of Kokkos. The OpenMP API enjoys broad compiler support, including GCC, Clang/LLVM, and vendor implementations (many of which are based on LLVM). Kokkos includes one backend for OpenMP on host CPUs only, and another with GPU support using the offload model. The latter, which Kokkos refers to as the OpenMP-Target backend, is the subject of this paper. For the rest of the paper, whenever we refer to Kokkos-OMP backend, it is specifically to the OpenMPTarget backend that targets GPUs.
Previous work investigated the performance of Kokkos-OMP backend compared to the CUDA and HIP backends on NVIDIA and AMD GPUs, respectively, in the context of a conjugate gradient solver . That study found that while performance of single level parallelism was adequate, the Kokkos-OMP backend handled hierarchical parallelism, e.g., sparse-matrix vector multiplication, poorly.
In this paper, we demonstrate improvements to the Kokkos-OMP backend by integrating recent capabilities from LLVM/OpenMP in the following new extensions:
• Support for GPU scratch memory (often referred to as "shared" memory on NVIDIA GPUs or "Local Data Storage (LDS)" on AMD GPUs), with a focus on dynamic scratch memory allocation. • Implementation of grid parallelism in OpenMP, analogous to CUDA/HIP, along with comprehensive support for all three levels of hierarchical parallelism. • Integration of advanced reduction techniques, including shuffle instructions in OpenMP. We evaluate these improvements using Kokkos-based applications, comparing their performance against existing implementations and vendor-preferred backends for each target architecture.
The remainder of the paper is organized as follows. In Section II and Section III we explain the motivation and background for the work. Section IV discusses the extensions to the LLVM/OpenMP ecosystem and how they are integrated into the Kokkos framework, along with empirical results to demonstrate performance impact. We discuss some related works in Section V, and conclude the paper in Section VI.