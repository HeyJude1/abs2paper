I. INTRODUCTION
Hypergraphs are generalizations of graphs that represent multi-entity relationships in a broad range of domains, such as cybersecurity , , biological systems , social networks , and telecommunications . While graph edges connect exactly two nodes, hyperedges may connect any number of nodes. Most real-world hypergraphs are non-uniform, meaning they have differently sized hyperedges, which poses challenges for their compact representation and analysis.
For uniform hypergraphs, symmetric tensors are popularly used to represent the higher-order adjacency information , . Several strategies have been explored to extend the tensor representation approach to nonuniform hypergraphs, including adding dummy nodes , , considering the set of symmetric adjacency tensors, with each tensor arising from the component uniform hypergraph of a particular hyperedge size , , and combinatorially inflating the lower-cardinality hyperedges until all hyperedges are equisized . Following Aksoy, Amburg, and Young , we call these inflated hyperedges blowups and focus on the adjacency tensor as defined by Banerjee et al. , which we call the blowup tensor. S 3 TTVC is a key operation on symmetric tensors, and is the computational bottleneck in fundamental algorithms such as the shifted-power method for computing tensor eigenpairs and symmetric CP-decomposition - . These algorithms, in turn, are utilized to perform a variety of hypergraph analyses. For instance, eigenpairs of the adjacency tensor of uniform hypergraphs are used to define H-eigenvector centrality (HEC) , a nonlinear hypergraph centrality measure which was further extended to non-uniform hypergraphs using the blowup tensor representation . Thus, developing performant algorithms for S 3 TTVC on the blowup tensor enables efficient computation of hypergraph centrality.
However, working with the blowup tensor requires we overcome several computational challenges. First, since enumerating all its nonzeros is prohibitively costly, following Aksoy, Amburg, and Young, we will adapt the "generating function approach" , to perform the computation indirectly. Second, we introduce a new, compressed format for tensors that is tailored to reduce the memory footprint of storing nonuniform hypergraphs, called Compound Compressed Sparse Symmetric (CCSS). This extends past work on the CSS format for uniform hypergraphs , and, as explained further in Section IV, achieves S 3 TTVC performance gains via memoization of intermediate results.
Our main contributions are summarized as follows:
• We introduce the Compound Compressed Sparse Symmetric (CCSS), an extension of the CSS format for non-uniform hypergraphs, and demonstrate up to 26.4× compression compared to coordinate storage format for real-world hypergraphs. • We implement an efficient multi-core parallel S 3 TTVC algorithm, called CCSS-MEMO which adapts the generating function approach to the CCSS format, and identifies opportunities for memoization of intermediate results.
• We present two baseline approaches which use the CCSS without memoization and adopt two state-ofthe-art approaches to highlight the performance of CCSS-MEMO. We realize up to 53.98× speedup compared to CCSS-DIRECT, and up to 12.45× speedup compared to CCSS-FFT. • We apply our algorithm to the calculation of Heigenvector centrality for hypergraphs, obtaining speedups of many orders of magnitude over stateof-the-art approaches.