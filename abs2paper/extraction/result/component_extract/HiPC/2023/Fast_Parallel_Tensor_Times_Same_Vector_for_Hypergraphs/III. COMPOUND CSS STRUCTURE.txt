III. COMPOUND CSS STRUCTURE
In this paper, we present an extension of CSS, called Compound Compressed Sparse Symmetric (CCSS) which facilitates fast S 3 TTVC computation on the blowup tensor representing non-uniform hypergraphs. One natural way to extend CSS to non-uniform hypergraphs would be to build an instance of CSS for each constituent uniform hypergraph and work independently on the corresponding adjacency tensors. However, as the associated tenors would all be of different orders, additional work would be needed to lift the methods of Shivakumar et al. to the non-uniform case. Furthermore, similar to the AAY approach, decomposing the non-uniform hypergraph into multiple uniform hypergraphs leads to significant extra computation and storage. For instance, if u and v are in multiple edges of different sizes then memoized work for the subsequence u, v occurs in the CSS for each of these edge sizes.
i 1 2 1 1 4 1 5 i 2 3 3 2 5 4 7 i 3 4 4 3 6 6 i 4 7 6 8 7 vals v 1 v 2 v 3 v 4 v 5 v 6
Instead, we introduce CCSS which extends the CSS to non-uniform hypergraphs by building a forest of N − 1 levels containing all proper subsequences E(B), that is, the ordered proper subsets of the edges. In particular, if f is a size proper subset of an edge e, f is represented by a unique root to level path in the forest, and further, this path is given by an in-order listing of the elements of f . In contrast to CSS, in CCSS the edges of B are "owned" by vertices in the forest at all levels and a vertex at a given level may own multiple edges. We note that the edges owned by a given vertex can be thought of as special leaves of the data structure (at level corresponding the the edge size) which store the "dropped" vertex and the value of the tensor at all blowups of the edge. These special leaves of the CCSS can be easily enumerated as the ordered pairs L = {(e, v) : e ∈ E, v ∈ e}. We will denote by L k ⊆ L those special leaves corresponding to an edge of size k. We will also denote by S(v) the set of special leaves "owned" by a vertex in the CCSS structure and note that L = ∪S(v) where the union is taken over all vertices at level − 1 in the CCSS structure.
In the example shown in Fig. , the CCSS is constructed from a 8-node weighted non-uniform hypergraph with edges (shown in index-ordered format) in Fig. . We can easily see the reduction in space (as compared to the multiple CSS approach) in this example -the sequence is shared between the sequences and , corresponding to the edges {1, 4, 6} and {1, 3, 4, 6}, respectively.
A. Space complexity
The total number of nodes in the CCSS depends not only on the number of edges in E(B), but also the relative sizes and intersection structure. Thus, although a single edge e requires at |e| vertices at level in the forest and 2 |e| − 1 vertices in the forest overall, because of the intersections across edges the size of CCSS is typically much smaller than the worst case
e∈E 2 |e| − 1.
In the next section, we outline how CCSS can be used to compute S 3 TTVC on the blowup tensor.