VI. RELATED WORK
Graph Libraries. There are numerous graph libraries, such as , - , - , that aim to provide highperformance implementations of graph kernels using different sequential and parallel algorithms. LAGraph is a library that contains representative graph algorithms and is based on sparse linear algebra operations from the SuiteSparse:GraphBLAS package . On the other hand, NW-Graph is a high-performance header-only graph library that leverages C++20 features. However, different libraries have their own approach to optimization and are tied to specific programming models. In contrast, the compiler potentially offers a unified solution for sequential and parallel code generation through the MLIR back-end while being complementary to existing library-based approaches. Compilers for Sparse Computations. There are several domain-specific compilers designed for generating code of sparse operations in graph algorithms, including Green-Marl , GraphIt , and TACO . These compilers, such as Green-Marl and TACO, perform source-to-source translation, where TACO translates its DSL operations to C++ using computational templates. However, TACO does not support parallel sparse computation (e.g., parallel SpGEMM), and its optimizations mainly focus on sequential code. In contrast, the compiler in this work proposes optimizations including two-phase computation and parallelization for sparse kernels.
Recently, MLIR infrastructure added support for sparse tensors through the sparse-tensor dialect . COMET precedes this support and does not utilize the sparse-tensor dialect. As a result of MLIR's support for sparse tensors, we can expect more MLIR-based compilers to include support for graph algorithms in the future. One such example is the mlir-graphBLAS effort that plans to lower to linalg dialect. Previously, it used to generate code at the loop level (SCF dialect) in a similar manner to this work albeit without optimizations such as workspace transforms.