V. SIMD VECTORIZATION
The OBF and ODF schemes enable multiple tree traversals to be performed in parallel through the use of SIMD instructions operating on wide vector registers. These parallel tree traversals can process multiple trees within an ensemble for a single input sample, or multiple input samples using a single decision tree. A hybrid version, involving the parallel processing of multiple input samples using multiple decision trees is also feasible, but will not be considered here.  on the node-level compare types defined by the flag bits that are extracted from the most-significant featureselector bits (see Section IV-B). 6 Generate a node-offset-increments vector, that will be used to update the current-node-offsets vector, from the compare-results vector and a right-child-offsetincrements vector. 7 Update current-node-offsets vector using the node-offsetincrements vector. If the parallel tree traversal is completed, retrieve the results from the current node offsets in the data structure, otherwise iterate steps 2 to 7 . In step 3 , the feature values are extracted from the current input sample in case of parallelization over trees, and from successive input samples within the input batch in case of parallelization over input samples. The actual loops that will cover all trees in the ensemble and all input samples within a batch will be discussed in Section VI.
For the OBF scheme, the right-child-offset-increments vector comprises only elements equal to 1. These elements only need to be added to the current-node-offsets vector if the corresponding comparison result is negative. This can be implemented using masked add operations (e.g., AVX-512) or similar operations. This addition is executed as part of step 7 , which first shifts the current-node-offsets vector to the left by one in order to multiply the node offsets by two as described in Section IV-A. If the parallel tree traversals through the OBF partitions all end in result nodes that correspond to leaf nodes, then the parallel tree traversals have completed. Otherwise step 7 involves retrieving the references to other partitions from result nodes that do not correspond to leaf nodes and start processing these partitions as described above, while iterating the processing of the same partitions for result nodes that correspond to leaf nodes, until all traversals have completed. Note that the latter partition-level processing is not covered in Fig. .
For ODF1, the right-child-offset-increments vector is loaded at the start of the prediction with an initial value that is determined by the tree depth and it is shifted to the right by one (divided by two) at the end of each loop as was discussed in Section IV-B. For ODF2, the right-child-offset-increments vector is retrieved in each loop from the node structures at the current-node-offset vector. ODF does not require a shift operation in step 7 as OBF does. Leaf nodes in the ODF2 structure are processed as a special split node involving a zero offset increment which triggers repeated processing of these nodes as discussed in Section IV-B. Consequently, if the nodeoffset-increments vector only contains zero elements, then all parallel tree traversals have completed and the loop ends.