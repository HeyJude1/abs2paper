9 Conclusion
In this paper, we present UWOmp 𝑝𝑟𝑜 that allows point-to-point synchronizations and reduction operations, among the activities of parallel-for-loops of OpenMP. We present a scheme to compile UWOmp 𝑝𝑟𝑜 codes to efficient OpenMP code. We have also designed a runtime, based on a novel postbox based communication subsystem to support efficient signal and wait functions, along with reduction operations and arbitrary schedules of OpenMP. We have implemented our scheme in the IMOP compiler framework and performed a thorough evaluation. We argue that programmers can write expressive and performant codes using UWOmp 𝑝𝑟𝑜 .
• The following command invokes the IMOP translator to translate the code: java -da -Xms2048M -Xmx4096M -cp third-party-tools/ com.microsoft.z3.jar:. imop.Translator -nru -f <file>.i • Compile the translated benchmark using any OpenMP C Compiler: gcc -fopenmp -O3 -o <file> outputdump/<file>-processed.i • Run the translated benchmark: ./<file> [Optional Arguments]
After running the translator, the translated output will be present in a output-dump folder created by the IMOP translator. The filename will contain a postfix -processed denoting the final processed output.