8 Related Work
Aloor and Nandivada proposed the novel idea of a unique worker model (UWOpenMP), which gives the programmer an impression that each iteration of a parallel-for-loop is executed by a unique thread (worker). Such a model allowed barrier statements to be inserted inside work-sharing constructs like parallel-for-loops. Aloor and Nandivada work on UWOmp++ extended the above idea further and provided support for recursive functions (with barriers) to be invoked within parallel-for-loops. In contrast, UWOmp 𝑝𝑟𝑜 extends this idea further to allow point-to-point synchronization, reduction operations between the activities (iterations) of a parallelfor-loop and allow arbitrary scheduling policies of OpenMP.
OpenMP supports a taskwait command with depend clause which can be used synchronize between the tasks; the dependencies are specified in terms of shared variables (for example, depend (out:x), or depend (in:x)) and not individual tasks. In contrast, UWOmp 𝑝𝑟𝑜 supports point-to-point synchronization among the iterations (activities) of parallel-for-loops. Further, UWOmp 𝑝𝑟𝑜 supports reduction operations in the middle of the activities, such that the final reduced value is available immediately after the reduction operation (do not have to wait for the end of the parallel region).
There have been multiple efforts to utilize continuations to extend and translate parallel programs. use the idea of continuations to explicitly maintain activation records for all the activities, and use these activation records at the time of pausing (store the activation records) and resuming (restore the activation record) the activities. Maintaining activation records for all the activities creates unnecessary memory overhead In contrast, our approach only saves the information that needs to be executed by each activity in its corresponding closure data structure; further, we reutilize memory in order to avoid unnecessary malloc calls. Fischer et al. provide a modular approach to do a CPS translation of event-driven programs in Java. For the Cilk language, Blumofe et al. propose a C-based runtime with a work-stealing scheduler useful for multithreaded programming, which uses continuations to spawn and join tasks. Our approach takes advantage of CPS to efficiently perform wait and continue operations, and supports different scheduling policies, along with reduction operations.
White describes an implementation for OpenMP-tasks (created using #pragma omp task directive) using continuations. UWOmp 𝑝𝑟𝑜 uses continuations to efficiently handle activities in parallel-for-loops, which may contain synchronization points (point-to-point or all-to-all) even within recursive functions.
For HJ, Imam and Sarkar propose the idea of one-shot delimited continuations (OSDeCont) to support cooperative scheduling and event-driven controls. One main restriction in their approach is that it works only for help-first and work-first approaches of workstealing. We take inspiration from their approach, but generalize the techniques so that we are not limited to specific scheduling policies and our scheme works in the context of OpenMP parallel-for-loops.