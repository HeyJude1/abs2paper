2 Background
2.1 Communication Topology of HPC
Large-scale HPC systems often implement a hierarchical communication topology through routing cells (RCS) to link different computing nodes. In Figure denoted as R j i ; thus, the domains can be represented as D 0 0 = {R 0 0 , C1, C2, C3}, D 0 1 = {R 0 1 , C4, C5, C6}, D 1 0 = {R 1 0 , C1, C2, C3, C4, C5, C6}, etc. We can observe that C1 and C4 are in different leaf domains, i.e., D 0 0 and D 0 1 , but they are in the same domain D 1 0 , i.e., the first-level domain. In practice, there are significant differences in the communication latency at different levels of the communication domains. This drives us to orchestrate data layout among communication domains to minimize communication overhead.
2.2 CSR and Graph Distribution
A graph is usually represented using an adjacency matrix. The CSR format is widely used for storing sparse matrices in large-scale graph processing . CSR represents a sparse matrix using three one-dimensional arrays: val, RST, and COL. The val array stores the non-zero values in contiguous locations, with the rows packed together. The RST array specifies the starting index of each row in the val array, while the COL array maps each non-zero value to its corresponding column. Graph processing algorithms mostly focus on accessing each vertex and then filtering vertices on demand. For clarity, the val array can be omitted for better understanding. Figure gives an example of how an undirected graph as shown in Figure (a) and its adjacency matrix as shown in Figure (b) can be represented using the CSR format as shown in Figure .
Many real-world graphs are sparse and uneven. Prior sparse matrix storage formats essentially distinguish solely between zero and non-zero elements, meticulously recording 2:6 X. Gan all non-zero entries of the matrix while concentrating efforts on eliminating 0-degree vertices to enhance memory utilization efficiency. However, GraphService is tailored for graph processing by further compressing the graph adjacency matrix by grouping the same-degree vertices (e.g., vertices{2, 3}, {4, 5}, and {6, 7} shown in Figure ). It is worth noting that identical-degree vertices make up the vast majority of real-world and synthetic graphs . As a result, there is lots of room for GraphService to demonstrate its potential.