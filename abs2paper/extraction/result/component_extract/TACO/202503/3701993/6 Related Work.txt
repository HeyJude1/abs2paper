6 Related Work
Pointer analysis in C. Pointer analysis has been a topic of research for decades. One of the most impactful approaches, the "points-to" analysis, was proposed by Andersen et al. and developed and improved over the years . Our approach is orthogonal to this method, and while more constrained in the patterns it detects, it provides a powerful benefit towards automatic parallelism detection.
Parallelization of C programs. Numerous approaches are emerging to identify parallelism in C code, with varying levels of automation. Tools like DiscoPoP detect loops that can be parallelized with OpenMP, while frameworks such as Polly and Pluto use polyhedral models to generate parallel code automatically. However, these methods struggle with codes that use pointers as iterators. Our approach, as demonstrated with DaCe, could be integrated into these workflows to extend their capabilities.
Parallelization of programs with pointers. Utilizing the Distributed Dynamic Pascal (DDP) language facilitates the development of parallel programs involving pointers. The DDP language introduces explicit pointer access mechanisms to enable the parallelization of pointer-related operations. In contrast, our approach seamlessly integrates with existing C programs, obviating the necessity for transpilation processes.
Intermediate representations. The LLVM IR allows for many transformations and code optimizations. However, tracking pointer dependencies across scopes remains difficult. A new opportunity has appeared with the recent rise of MLIR , a framework that allows multiple IR dialects to co-exist and their different strengths to all contribute to overall code analyzability and performance. The MemRefType built-in dialect already enables to specify the shape of the underlying data. This includes the option to save the start of a data container even if the pointer is moved. MLIR would permit our approach to be implemented as a dialect, bringing it to the wider LLVM ecosystem.
Source code modification. The alteration of source code within DSP programs facilitates the elimination of pointer references as outlined in the work by Franke et al. . While the approach bears some resemblance to our proposed method, it exhibits comparatively reduced flexibility. It exclusively encompasses static code modifications, devoid of the incorporation of the adjunct concept, which enables the utilization of compile-time-determined values exclusively. The primary aim remains the enhancement of computational efficiency, albeit without resorting to parallel processing techniques.
Pointers metadata. Incorporating metadata into pointers is not a novel concept, as evidenced by previous studies . In other scenarios, where the emphasis is on safety rather than performance, statically known mappings to pointers have been established. This facilitates the addition of runtime bounds checking, analogous to how we introduce runtime pointer movements through source code modifications.
Stream Semantic Registers. Stream Semantic Registers (SSR) is a RISC-V ISA extension that offloads memory access management to hardware and automatically advances addresses in loops. However, SSR relies on known and regularly strided memory locations, which is not always true for pointers. Our transformation overcomes this limitation by converting pointers into arraystyle accesses, making SSR applicable.