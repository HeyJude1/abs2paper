6 Evaluation
We first evaluate C6Awarm/C6AwarmE using Memcached in terms of performance degradation and power savings over a baseline scenario optimized for power savings (Turbo disabled/P-states disabled/C-states enabled). In Section 6.2 , we evaluate C6Awarm using Memcached over a baseline scenario optimized for performance (Turbo disabled/P-states disabled/Deep C-states disabled). Finally, in Section 6.3 , we present additional evaluation of C6Awarm with the MicroSuite benchmarks.
6.1 AgileWatts vs Power-Optimized Configuration
Figure shows how AW affects request latency against the baseline with Turbo and P-states disabled (i.e., frequency is set to nominal frequency, P 1: 2,200MHz) and C-states enabled. We expect AW to achieve significant power savings, thanks to the lower power of C 6 Aw arm/ C 6 Aw armE compared to C 1 / C 1 E, while having a small impact on request latency because of the larger transition time ( ∼90ns) and the ∼1% frequency loss (Section 4.1.1 ). While the larger transition time impacts each C-state transition, the impact of the frequency loss depends on the sensitivity of the workload to the core frequency reduction.
Figure (d) shows the residency of the system in each C-state: as expected, idle time progressively reduces as load (QPS) increases. Therefore, we expect AW to have larger power savings and lower impact on performance at low load. Figure (c) shows that AW reduces the average power consumption by up to 50% at low load, with less than 2% impact on the server side and less than 0.2% impact on the client side (see Figure (a) and (b)). At high load, AW still provides 13% power savings, with less than 1% impact on the server side and 0 . 1% impact on the client side. Lo et al. state the following in their work that discusses latency-critical applications : "Modern servers are not energy proportional: they operate at peak energy efficiency when they are fully utilized, but have much lower efficiencies at lower utilizations." The utilization of servers running latency-critical applications is only 5% -25% to meet target tail latency requirements, as reported by multiple works from academia and industry . For example, recently, Alibaba reported that the utilization of servers running latency-critical applications is typically 10% . Therefore, our AW proposal addresses the more inefficient aspect of modern servers: running latency-critical microservice-based applications at low utilization.
We conclude that AW significantly reduces core average power consumption of the Memcached service across various load levels with minimal performance overhead over the baseline when disabling P-states and Turbo and enabling C-states.
6.2 AgileWatts vs Performance-Optimized Configuration
As discussed in Section 2.4 , datacenter operators disable deep idle core states to prevent queries from incurring transition and cold-start latency overheads . In this section, we evaluate AW benefit for servers at which deep C-states are disabled. Figure shows how C6Awarm C-state affects the average response time and the power savings of the baseline (Turbo disabled/P-states disabled/Deep C-states disabled). Since C6Awarm has less power consumption than C1 (0.35W vs 1.44W), we expect C6Awarm to have more power savings than the baseline. Additionally, the performance impact due to the increase in the transition time of C6Awarm is only 90ns. The performance degradation caused by the 1% reduction in the clock frequency due to power gating depends on the sensitivity of each workload to the clock frequency. clock frequency ranges from 1.5% to 2%. As expected, the server-side reduction is higher than the client side, which is around 0.1%-0.2%. In the case of Memcached, the end-to-end response time is primarily dominated by the network latency. Specifically, 10% of the actual end-to-end time is spent on processing. As a result, the degradation experienced by the client is 1/10 of the degradation experienced by the server. The increase on the average response time observed in high loads is primarily a result of the increase in queueing overhead rather than the additional overhead of the new core C-state architecture for C6Awarm.
Figure (c) and (d) present the average core power savings and the core C-state residency, respectively. The power savings go from 72% to 15% while we increase the load of the system from 2% to 56%. For higher load, the opportunity to enter C6Awarm is less, as the activity of the system increases and as a result the idle time gets smaller. Even with a 50% average utilization, our AW architecture continues to have significant power savings (15%). Since the representative utilization of latency-critical applications is 5%-25% , our AW architecture provides significant power savings (72%-36%) for these applications.
It is important to note that C6Awarm evaluation of Memcached against a performance-oriented baseline provides more power savings than against a power-oriented baseline. The performanceoriented baseline has only core C-state C1 enabled, and as a result, all idle time is attributed to C1 offering significant power savings for C6Awarm (1.44W vs 0.35W compared to 0.1W vs 0.35W for a power-oriented baseline). For the medium-range utilization points, the power savings of the power-and performance-oriented baseline are close. This is because even though the core C-states are enabled for the power-optimized baseline, the system during medium utilization resides in C1/C1E and not in C6. The evaluation shows that AW compared to a system optimized for power consumption and a system optimized for performance provides up to 36% and 72% power savings, respectively.
We conclude that C6Awarm significantly reduces the core average power consumption of a Memcached service across various load levels with minimal performance overhead over the baseline configuration at which C1 is enabled, P-states are disabled, and Turbo is disabled.
6.3 Analysis of Additional Workload
In this section, we evaluate AW benefit for servers running applications with multi-tier microservice-based software architecture. Figure presents the client and server average response time for all benchmarks of MicroSuite for C6Awarm compared to the baseline (Turbo disabled, C1 enabled, P-states disabled). The first row of the graph represents the client average response time, and the rest of the rows represent the midtier (managing both incoming and outgoing requests) and bucket (leaf-managing incoming requests) average response time, respectively. Each of the benchmarks exhibit different sensitivity to frequency degradation as the performance impact ranges from 0.2% to 2.2% for both midtier and bucket. As expected, the impact on the client side is less than the server side (0.1%-1.1%) since a significant portion of the end-to-end time is spend on the network communication. Contrary to Memcached, these benchmarks (except for Router) have higher client overhead (0.1%-0.6%/0.6%-1.1%/0.8%-0.92% for HDSearch/SetAlgebra/Recommend vs 0.05%-0.4% for Router). This is because a bigger percentage of the end-to-end response time is spent on computation (50%/60%/80% for HD-Search/SetAlgebra/Recommend vs 20%-30% for Router vs 10% for Memcached).
Figure shows the core average power savings for each benchmark and tier (midtier, bucket) along with the core C-state residency. Like Memcached, the power savings go from 70% to 37% while we increase the load of the system from 2% to 27%. The increase in the load reduces the opportunity for the system to enter C1/C6Awarm, which reduces AW power savings.
We conclude that AW with disabled P-states, disabled Turbo, and C0/C6Awarm enabled significantly improves core average power for the MicroSuite benchmarks as compared to the baseline.