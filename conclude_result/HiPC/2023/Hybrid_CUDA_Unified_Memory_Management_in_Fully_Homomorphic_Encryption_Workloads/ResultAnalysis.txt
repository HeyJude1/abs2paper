实验结果分析总结：

1、主要发现:  
- 在A40 GPU上，**性能优化方案（profiling allocation scheme）**在BM-bootstrap和ResNet等大内存工作负载中表现最佳。其中：  
  - BM-bootstrap的最优异步内存分配阈值（peak asynchronous memory threshold）为40-60%，可显著减少引导时间。  
  - ResNet在65%的异步分配阈值下达到最佳性能。  
- 在GeForce GTX 1660 Ti和1050 GPU上：  
  - **静态分配方案（static scheme）**对大型参数（如FGa、FGb、FVb）的性能最优，较基线（完全托管内存）提升31%。  
  - **动态分配方案（dynamic scheme）**无需修改库代码即可实现50%的引导操作性能提升，且在小型参数上与静态方案性能接近（静态略优）。  
- **完全托管内存方案（fully managed memory）**在所有测试中表现最差，延迟高且方差大。

2、消融研究结论:  
- **三种方案的侵入性差异直接影响性能优化潜力**：  
  - **动态方案**仅修改内存分配器，侵入性最低但性能提升显著（50%）。  
  - **静态方案**需手动修改库代码以指定异步分配对象，侵入性最高但性能最优（31%提升）。  
  - **性能分析方案**依赖外部存储和预处理脚本，虽需额外开销但性能优于人工交换22%。  

3、其他分析洞察:  
- **参数敏感性分析**：异步内存分配阈值对性能影响显著，不同负载需针对性调整（如BM-bootstrap的40-60% vs. ResNet的65%）。  
- **硬件适配性**：高性能GPU（A40）更适合结合分析方案的复杂负载，而中低端GPU（1660 Ti/1050）中静态/动态方案的优化效果更突出。  
- **案例对比**：动态方案的“实时调整”特性使其在无需预分析或代码修改的场景下接近静态方案的性能，体现了实用性与效率的平衡。  

关键数据总结：  
- 静态方案 vs. 完全托管内存：+31%性能  
- 性能分析方案 vs. 人工交换：+22%效率  
- 动态方案 vs. 完全托管内存：+50%引导操作速度