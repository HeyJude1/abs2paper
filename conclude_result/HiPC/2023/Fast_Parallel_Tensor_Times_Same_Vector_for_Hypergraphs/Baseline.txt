Baseline选取总结：  
1、对比方法:  
- **CCSS-DIRECT**  
- **CCSS-FFT**  

2、选取理由:  
作者选择这两个Baseline方法的依据如下：  
- **技术路线覆盖**：  
  - **CCSS-DIRECT** 代表直接计算多项式乘法的传统方法，作为性能下限参考。  
  - **CCSS-FFT** 采用基于FFT的卷积优化，代表当前高效的数值计算路径。两者共同覆盖了算法优化的两种核心思路（直接计算 vs. 频域优化）。  
- **内部对照需求**：  
  两者均为作者团队提出的算法变体（均基于Algorithm 3），与主方法**CCSS-MEMO**（Algorithm 4）形成严格的内部对比，可隔离评估"记忆化（memoization）"带来的性能增益。  
- **SOTA对比延伸**：  
  论文还额外对比了单核环境下与第三方SOTA方法（Python实现的Algorithm 2），但核心Baseline仍聚焦于内部方法，以排除语言/系统差异对性能分析的干扰。  

（注：原文明确指出CCSS-DIRECT因未使用FFT而性能较差，CCSS-FFT则通过FFTW库实现优化，凸显了主方法在算法层面的改进而非单纯工程优化。）