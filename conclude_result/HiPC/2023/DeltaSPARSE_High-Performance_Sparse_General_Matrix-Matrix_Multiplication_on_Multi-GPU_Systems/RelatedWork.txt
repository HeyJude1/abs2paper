相关工作总结：

1. 现有方法一：ESC（Expansion-Sort-Compress）方法
核心思想: 通过临时空间存储中间结果（扩展阶段），按列索引排序中间结果，最后按列索引累加值。
主要局限性: 需要大量临时存储空间；中间结果规模增大时排序成本高，导致性能急剧下降。

2. 现有方法二：Hash方法
核心思想: 利用哈希特性减少随机数据访问，采用两阶段策略（计算非零元素数量后分配精确存储空间）。
主要局限性: 原子累加操作和后续排序步骤成为性能瓶颈；GPU共享存储不足时需使用全局存储导致性能下降。

3. 现有方法三：Merge方法
核心思想: 使用排序数组存储中间结果，采用高效合并算法进行排序（如RMerge的子矩阵划分策略）。
主要局限性: 合并数组通常等长，无法有效处理不规则稀疏特性，资源利用率低。

4. 现有方法四：Dense方法
核心思想: 为大规模稠密输出矩阵设计，直接基于列索引进行线性映射和结果累加。
主要局限性: 高存储需求成为瓶颈，不适用于稀疏场景。

5. 现有方法五：Tile-based方法
核心思想: 以分块为基本单位进行任务划分和调度（如TileSpGEMM），提升硬件利用率。
主要局限性: 引入显著的格式转换时间成本；在极端稀疏场景下性能较差。

6. 多GPU相关方法：
- SuperMatrix/MAGMA/cuBLAS-XT：面向稠密矩阵的静态/动态调度策略
- StarPU/BLASX：采用动态异步运行时和P2P通信优化
- cuSpAMM扩展：多GPU稀疏近似矩阵乘法
主要局限性：
• 稠密矩阵方案无法直接适用于稀疏场景
• cuSpAMM的均等行划分策略导致不规则稀疏矩阵的负载不平衡
• MAGMA在异构系统存在局限
• cuBLAS-XT存在频繁通信问题

研究缺口：
1. 单GPU层面：
- 缺乏能同时解决存储压力、不规则稀疏特性和高计算效率的统一方案
- 现有方法在不同稀疏度场景下表现不稳定

2. 多GPU层面：
- 缺乏专为稀疏矩阵设计的负载均衡方案
- 现有通信优化策略未充分考虑稀疏矩阵的特性差异
- 任务划分策略对不规则稀疏模式适应性不足