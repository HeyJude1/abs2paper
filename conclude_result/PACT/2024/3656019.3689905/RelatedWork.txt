相关工作总结：

1、现有方法一：结构化稀疏存储格式（Structured Sparse Formats）
核心思想: 采用硬件友好的规则稀疏模式（如块稀疏），通过牺牲部分压缩率换取计算规整性，主要应用于机器学习领域。
主要局限性: 存在精度与压缩率的固有权衡（accuracy-compression tradeoff），且受限于硬件强制的稀疏模式。

2、现有方法二：坐标指针类格式（CSR及其变种）
核心思想: 使用行偏移（row_ptr）和列索引（col_idx）的非规则存储方案，适用于超稀疏矩阵的科学计算场景。
主要局限性: 
- 对中等稀疏度工作负载效率低下
- 增加片上资源消耗（存储需求和通信开销）
- 加剧内存带宽瓶颈（尤其在SpMM等带宽敏感任务中）

3、现有方法三：位图存储格式（Bitmap-based Formats）
核心思想: 通过位掩码标记非零元素位置，实现紧凑存储。
主要局限性:
- 缺乏成熟的索引策略
- 处理长零值序列时效率低下
- 需要昂贵比较操作消除无效计算

4、现有方法四：分层存储技术（Hierarchical Storage Techniques）
代表工作: ExTensor（分块CSR）、DSTC/SMASH（分层位图）、Fibertree（抽象分层）
核心思想: 通过多粒度层次结构跳过全零计算单元。
主要局限性:
- 对密度较高矩阵不友好（仍需处理大量零值）
- 依赖显式比较或高成本累加操作
- 未能有效结合高效数据流架构

5、现有方法五：稀疏数据流架构分类
(1) 内积数据流（Eyeriss/SIGMA）：
核心思想: 直接比较非零元素坐标
局限性: 比较开销大

(2) 外积数据流（SpArch/OuterSPACE/DSTC）：
核心思想: 基于outer-product的乘积累加
局限性: 部分和合并成本高

(3) 行乘积数据流（MatRaptor/InnerSP/GAMMA）：
核心思想: 行方向乘积配合专用合并硬件
局限性: 需要复杂预处理

研究缺口：
1. 缺乏同时适应不同稀疏模式的通用存储方案
2. 现有层次化方法在中等稀疏度场景效率不足
3. 数据流架构与存储格式协同优化不足
4. 内存带宽瓶颈未得到根本解决