方法概述：
1、方法名称: ZeD (Zero-Efficient Decoding)
2、核心思想: 通过分层位树存储格式和优化的数据流设计，实现可变非结构化稀疏矩阵的高效存储与计算。核心创新在于：(1) 采用层次化位树压缩技术减少元数据开销；(2) 基于行访问重组的动态内存优化策略；(3) 硬件友好的零值跳过机制。

3、主要流程/组件
组件/步骤一: 分层位树存储格式 (Hierarchical Bit-Tree Storage)
- 功能：将连续零值序列递归压缩为高层级的单个零值（类似哈夫曼树的RLE编码）
- 关键特征：二级树结构（l1/l2），4个连续元素组成"叶子"节点，仅存储非零叶子及其位置关系

组件/步骤二: 行式乘积数据流 (Row-wise Product Dataflow)
- 功能：基于Gustavson算法的改进方案，按行处理静态矩阵的非零元素
- 优化点：输出静止(output-stationary)的平铺策略，每个PE处理单输出行

组件/步骤三: 行访问重组策略 (Row Access Reorganization)
- 功能：通过离线分析静态矩阵行的相异性指数(dissimilarity index)
- 执行机制：将相似行分组处理以最大化流矩阵行的片上复用率

组件/步骤四: 多通道零检测硬件 (Multi-pass Zero-detection Hardware)
- 功能：并行检测位树中非零元素的相对位置
- 实现方式：基于4比特序列的轻量级控制逻辑，避免显式地址计算

组件/步骤五: 输出工作空间管理 (Output Workspace)
- 功能：采用密集临时张量存储部分和(psum)，支持快速插入和随机访问
- 优势：结合交叉开关(crossbar)实现局部归约，匹配8.1%的平均输出稀疏度

[注：所有组件通过坐标空间平铺(Coordinate-space Tiling)策略统一协调，其中流矩阵被划分为16列的块(chunk)，每个块包含多个行切片(row-slice)]