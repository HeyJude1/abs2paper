实验结果分析总结：

1、主要发现: 
- PipeGen生成的流水线在所有测试案例中均能正确执行指定的内存一致性模型（MCM），未出现违反MCM的情况。
- 在x86TSO和ARMv8两种MCM下，PipeGen通过三种转换组合（纯顺序内存指令、顺序内存+负载重放、顺序内存+无效跟踪）均能实现预期行为，允许MCM允许的结果，禁止MCM禁止的结果。
- 在涉及栅栏指令的特定案例（如ARMv8的DMB ST/DMB LD）中，PipeGen表现出比目标MCM略强的顺序性（灰色单元格），但未出现功能错误。

2、消融研究结论:
- 三种转换组件的关键作用被揭示：
  - **顺序内存指令**：基础组件，可单独实现所有需要的顺序约束。
  - **负载重放**：与顺序内存组合使用时，专门处理"存储→负载"类顺序（通过验证推测执行的负载）。
  - **无效跟踪**：与负载重放类似，但通过跟踪缓存无效化来实现"存储→负载"顺序。
- 设计架构的影响：
  - 无写缓冲（WB）的设计（如Design-2/3）会默认增强"存储→存储"和"存储→负载"顺序（黄色单元格），此时转换组件的选择需考虑架构约束。

3、其他分析洞察:
- **微架构敏感性**：相同转换组合在不同设计（如Design-1/2/3）中表现不同。例如Design-3因支持同地址存储→负载转发，在N7测试中结果与Design-2不同。
- **栅栏指令分析**：ARMv8的DMB ST栅栏会导致所有转换组合强制实现"存储→DMB-ST→负载"顺序，超出标准要求，揭示了栅栏实现与微架构的深度耦合。
- **验证方法有效性**：通过Murphi对7种(x86TSO)和22种(ARMv8)litmus测试的穷举验证，证实了生成流水线的可靠性，尽管存在少量保守情况。