根据论文内容，以下是Baseline选取策略的总结：

---

### Baseline选取总结  
1. **对比方法**:  
   - **PipeCheck**（基于𝜇spec的流水线验证工具）  
   - **Herd**（内存一致性模型验证工具）  
   - **传统硬件描述语言（HDL）方法**（如Verilog、VHDL、Chisel、Bluespec的手动实现）  
   - **微架构描述语言**（如Teapot、PDL等领域专用语言）  

2. **选取理由**:  
   - **PipeCheck和Herd**：作为当前主流的**验证工具**，它们通过形式化方法或litmus测试验证现有流水线是否符合目标内存一致性模型（MCM），但均属于“事后验证”而非“正确性构造生成”。作者选择它们作为Baseline以凸显PipeGen的**主动生成优势**。  
   - **传统HDL方法**：代表工业界实际开发流程中的手动实现方式，用于对比自动化工具（PipeGen）在减少人工错误和提升效率方面的价值。  
   - **微架构描述语言**（如PDL）：与PipeGen同属高层次抽象设计领域，但PDL等工具缺乏对多核MCM的支持。作者通过对比强调PipeGen在**多核场景下的唯一性贡献**。  

--- 

### 关键依据分析  
- **技术路线覆盖性**：所选Baseline涵盖验证工具（PipeCheck/Herd）、工业实践（HDL）、学术抽象方法（PDL），全面覆盖不同技术路线，体现PipeGen的跨维度创新。  
- **SOTA对比**：PipeCheck是当前最先进的MCM验证工具，而PipeGen通过生成而非验证提供更高阶解决方案。  
- **领域针对性**：微架构描述语言的对比突显PipeGen在“多核MCM自动化”这一细分领域的空白填补作用。  

注：论文未明确列出所有Baseline的名称，上述总结基于“相关工作”章节的隐含对比对象提取。