实验结果分析总结：

1、主要发现:  
- **性能对比**：与Baseline（SuiteSparse:GraphBLAS和LAGraph）相比，本文提出的编译器在多项任务中表现显著更优：  
  - **Semiring操作**：在输出矩阵为乱序（jumbled）状态下，速度提升最高达3.7倍（几何平均未明确，但所有输入均优于Baseline）。  
  - **稀疏计算核心（SpGEMM）**：启用掩码优化后，速度提升最高达2.19倍（几何平均1.48倍）。  
  - **图算法**：  
    - **三角形计数（TC）**：四种算法（Burkhardt、Cohen等）的几何平均速度提升分别为1.91×、1.54×、1.65×和1.68×，最高达2.52倍。  
    - **广度优先搜索（BFS）**：最高速度提升达9.05倍（几何平均2.57倍）。  
  - **并行性能**：24线程下，TC算法最高提速4.63倍，大型输入（Orkut、LiveJournal）最高提速2.02倍。  

2、消融研究结论:  
- **关键优化组件的作用**：  
  - **工作区变换（Workspace Transformation）**：显著改善数据局部性，在SpGEMM+元素乘操作的基准测试中带来20.60倍的几何平均速度提升。  
  - **掩码优化（Masking）**：通过跳过无效计算进一步提速1.86倍，尤其在稀疏矩阵中效果显著。  
  - **半环替换（Semiring）**：将SpGEMM中的乘法替换为Pair操作，为所有TC算法带来约5%的性能提升。  

3、其他分析洞察:  
- **输出排序影响**：当输出需有序时，因使用标准快速排序而非高级算法，性能较乱序输出下降1.75倍。  
- **输入密度敏感性**：高密度输入矩阵（如bcsstk17）中，基于推式掩码优化的收益递减；稀疏掩码可能更适合拉式方法。  
- **内存效率**：掩码优化显著降低内存占用，使大型输入（LiveJournal、Orkut）得以运行。  

*注：所有结果均为10次运行平均值，默认顺序执行；并行结果单独标注。*