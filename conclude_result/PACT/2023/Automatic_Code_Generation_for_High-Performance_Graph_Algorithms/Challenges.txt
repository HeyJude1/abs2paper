核心挑战总结：

挑战一：抽象层次的选择与平衡  
分析: 该挑战源于需要在开发图算法时找到一个既能保持高生产力（通过高级抽象实现易用性和可移植性），又能支持高效机器代码生成的抽象层次。现有低层次编程（如CUDA/C++）虽能实现高性能，但牺牲了可移植性和开发效率；而过度抽象的解决方案可能无法充分优化硬件性能。根源在于现代计算架构（如GPU/CPU）对规则计算的优化与图算法固有的不规则性之间的冲突，以及跨系统兼容性需求。

挑战二：稀疏计算的代码生成与优化  
分析: 由于现实图数据的极端稀疏性和大规模性，传统的密集计算优化方法（如循环展开、内存预取）难以直接适用。挑战具体表现为：(1) 稀疏数据结构（如邻接矩阵）导致内存访问模式不规则，加剧缓存失效；(2) 现有硬件架构（如SIMD单元、内存层次）主要针对密集计算设计；(3) 自动并行化困难，因数据依赖性难以静态分析。根源在于问题域特性（图算法的非结构化计算模式）与硬件设计假设（规则数据局部性）的根本性错配。

挑战三：跨平台性能可移植性  
分析: 当前实践中，为不同架构（如CPU/GPU/FPGA）手动重写图算法实现的方式不可持续。这一挑战的根源是：(1) 不同计算单元对稀疏操作的支持差异显著（如GPU对原子操作的效率限制）；(2) 现有库方案（如GraphBLAS）受限于特定编程模型；(3) 缺乏统一的中间表示（IR）系统来封装领域语义并适配多后端。论文指出这是由硬件异构化趋势与领域特定优化需求共同驱动的系统性难题。

补充说明：从相关工作部分可见，现有解决方案（如TACO、Green-Marl）未能完全解决这些挑战——或缺乏并行支持，或优化粒度不足。这进一步验证了上述挑战的普遍性和当前工作的创新必要性。