Baseline选取总结：  
1、对比方法:  
- **GCC**（使用GCC 12.1.1作为后端编译器）  
- **Polly**（基于Clang 15.0.6，未集成辅助变换）  
- **手动并行化版本**（基于OpenSSL PBKDF2实现）  
- **FastPBKDF2**（专为并行设计的算法实现）  
- **原始基准测试（OpenMP启用）**（Mantevo HPCCG基准测试）  

2、选取理由:  
作者选择的Baseline覆盖了以下关键维度：  
- **技术路线多样性**：  
  - *GCC*代表传统编译器优化；  
  - *Polly*作为基于多面体模型的自动并行化工具，是当前SOTA的自动并行化框架之一；  
  - *手动并行版本*提供人工优化的性能上限参考；  
  - *FastPBKDF2*展示算法级优化的潜力。  
- **实际应用代表性**：  
  - Polly和GCC是LLVM/Clang生态中广泛使用的工具，具有实际工程意义；  
  - OpenMP基准反映现有工业级并行方案的性能。  
- **科学对比需求**：  
  - 通过Polly验证指针分析的局限性（如未能识别SCoPs）；  
  - FastPBKDF2凸显算法优化与工具优化的性能差距；  
  - 手动并行版本证明自动方法的有效性（DaCe匹配其性能）。  

**特殊考量**：在Mantevo HPCCG中，原始OpenMP基准用于验证自动并行化对指针密集型场景的改进（DaCe性能反超18%），而Polly因无法处理指针迭代器被排除。