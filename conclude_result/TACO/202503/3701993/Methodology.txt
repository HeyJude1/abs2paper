方法概述：
1、方法名称: Pointer Disaggregation（指针解聚合）
2、核心思想: 通过将指针的容器访问功能和迭代功能解耦，将指针拆分为静态数据容器句柄和动态整数偏移量（adjunct变量），从而提升编译器对指针访问行为的静态分析能力，特别是循环中的元素敏感分析。
3、主要流程/组件
组件/步骤一: 指针声明转换
- 为每个指针声明创建对应的有符号整数类型adjunct变量
- 初始化时设置adjunct=0，建立指针到adjunct的映射关系

组件/步骤二: 指针访问重写
- 将*p转换为*(p + p_adj)等效形式
- 处理数组下标访问时自动合并adjunct偏移量
- 保持C99标准语义（p[i] ≡ *(p+i)）

组件/步骤三: 指针运算转换
- 将p = p + x转换为p_adj = p_adj + x
- 处理指针赋值时同步复制adjunct值
- 保留原始指针作为静态容器句柄

组件/步骤四: 函数调用处理
- 函数参数保持原始指针类型
- 调用时自动应用当前adjunct偏移量
- 依赖编译器内联优化保持跨函数分析能力

组件/步骤五: AST转换实现
- 基于libclang构建抽象语法树变换
- 维护pointer→adjunct的映射表
- 支持递归处理多级指针（需静态可确定容器）

关键创新点：
1. 运行时动态偏移支持：相比先前仅处理静态偏移的方法，可处理条件分支中的动态指针移动（如if-else不同偏移）
2. 分析能力增强：使编译器能应用整数分析技术（如Loop Strength-Reduction）到原生的指针操作场景
3. 兼容性保障：转换后的代码模式匹配现有分析框架（如SCEV、polyhedral模型）的输入要求