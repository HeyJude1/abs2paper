相关工作总结：

1、现有方法一：TACO
核心思想: 通过格式抽象支持多种稀疏格式（如CSF表示），生成稀疏张量收缩的直接代码。
主要局限性: 仅支持密集工作空间（近期更新前），无法自动优化张量布局、收缩调度和中间张量的模式缩减。

2、现有方法二：SparseLNR
核心思想: 为稀疏张量计算生成融合循环代码。
主要局限性: 未考虑张量模式布局与迭代顺序/中间稀疏张量模式缩减的交互作用。

3、现有方法三：Sparta库
核心思想: 提供稀疏张量收缩的专用库调用接口。
主要局限性: 缺乏对通用收缩树的融合执行支持，性能优化有限。

4、现有方法四：密集张量收缩优化（Cociorva等）
核心思想: 通过循环融合和冗余计算来减少中间张量存储空间。
主要局限性: 不适用于稀疏张量的紧凑数据表示，且会引入冗余操作。

5、现有方法五：Sparse Fusion
核心思想: 采用检查器-执行器策略实现两个稀疏核的迭代组合与融合执行。
主要局限性: 依赖运行时技术，未考虑编译时张量模式布局与迭代顺序的优化。

6、现有方法六：稀疏多面体框架
核心思想: 通过运行时迭代/数据重排序优化稀疏计算。
主要局限性: 不涉及循环/模式融合与重排序，存在显著的运行时检查开销。

7、现有方法七：SparseTIR/MLIR
核心思想: 提供可组合的稀疏张量表示和程序转换框架。
主要局限性: 未集成对张量布局、收缩调度和中间模式缩减的联合优化。

8、现有方法八：SpTTN-Cyclops
核心思想: 针对"单个稀疏张量与多个密集张量网络"的子类进行优化。
主要局限性: 无法处理任意稀疏张量网络，适用范围受限。

9、现有方法九：Indexed Streams/COMET/Finch等DSL方案
核心思想: 通过领域专用语言或形式化模型支持稀疏张量代数。
主要局限性: 均未实现CoNST所采用的"布局-调度-模式缩减"联合自动化优化框架。

研究缺口：
(1) 缺乏对通用稀疏收缩树的端到端优化方案；
(2) 现有工作未能耦合处理张量布局、收缩调度和中间模式缩减；
(3) 多数运行时优化方法存在额外开销；
(4) 特定领域解决方案（如SpTTN-Cyclops）泛化能力不足。