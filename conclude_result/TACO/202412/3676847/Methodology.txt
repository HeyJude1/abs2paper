方法概述：  
1、方法名称: **多GPU系统上稀疏矩阵-向量乘法（SpMV）优化框架**  
2、核心思想: 通过层次化矩阵分区和计算-通信重叠策略，解决多GPU系统中SpMV的负载不均衡和通信开销问题，提升迭代算法中的整体性能。  

3、主要流程/组件  
**组件/步骤一: 非零元均衡分区（Non-zeros-based Partitioning）**  
- **功能**: 将稀疏矩阵按非零元数量（NNZ）均匀划分为若干子块，每个GPU处理一个子块，确保计算负载均衡。  
- **关键点**: 基于CSR格式快速分区，但未解决跨GPU数据传输开销问题。  

**组件/步骤二: 两级非零元分区（Two-level Non-zeros-based Partitioning）**  
- **功能**: 将矩阵进一步细分为2×nGPU个子块，通过多CUDA流并行计算不同子块，实现单个GPU上计算与通信的重叠。  
- **关键点**: 子块间非零元数量相近但行数可能差异较大，导致传输时间不均衡。  

**组件/步骤三: 长行感知分区（Long-row-aware Partitioning）**  
- **功能**: 识别矩阵中的“长行块”（密集行区域）和“短行块”，优先计算短行块并传输结果，同时并行计算长行块以隐藏传输延迟。  
- **关键点**: 动态确定长行位置（如首/尾/中部连续行），通过执行顺序优化掩盖通信开销。  

**组件/步骤四: 冗余计算优化（Redundant-computing Optimization）**  
- **功能**: 从短行块中选取“高性价比子块”（行数多但计算量小），在所有GPU上冗余计算该子块，避免其结果的跨GPU传输。  
- **关键点**: 通过比较子块的平均NNZ选择最优冗余区域，进一步减少通信量并利用计算掩盖剩余传输时间。  

---  
**关系说明**:  
1. **层级递进优化**：从基础的非零元分区出发，逐步引入两级分区、长行感知和冗余计算，形成逐级细化的优化链条。  
2. **目标统一性**：所有组件均围绕减少通信开销与提升负载均衡展开，最终通过计算-通信重叠最大化多GPU并行效率。