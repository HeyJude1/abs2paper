相关工作总结：

1、现有方法一：**Loop optimization（循环优化）**  
核心思想:  
- 通过循环置换（loop permutation）和分块（tiling）技术优化数据局部性  
- 采用分析模型（如Chimera、MOpt）量化数据移动量，并通过约束求解生成优化策略  
- 自动化调优方法（如Ansor）生成并评估多种调度方案  
- 基于内存层次结构（寄存器/L1/L2缓存）设计循环布局（如MEATTEN受Goto分块算法启发）  

主要局限性:  
- 依赖静态分析或离线调优，难以动态适应硬件特性变化  
- 现有方法对注意力模块的特殊内存访问模式优化不足  

2、现有方法二：**Micro-kernel design（微内核设计）**  
核心思想:  
- 传统库（OpenBLAS/BLIS）采用外积基微内核优化大规模矩阵运算  
- 针对非常规矩阵的激进优化（如LIBXSMM/LIBSHALOM的数据打包隐藏、指令调度）  
- MEATTEN通过分析注意力模块内存访问模式，设计融合多步骤的高效微内核  

主要局限性:  
- 现有微内核主要面向通用矩阵乘法（MMs），缺乏对注意力计算的针对性设计  
- 传统数据打包技术引入额外开销  

3、现有方法三：**Parallel strategy（并行策略）**  
核心思想:  
- 线程池技术实现多核并行（如XNNPACK）  
- 基于表格的线程分配策略权衡性能与可移植性  
- 批处理并行（如LIBXSMM）但受算子形状限制  

主要局限性:  
- 忽略缓存层次结构导致局部性下降（如XNNPACK）  
- 并行策略缺乏动态适应性，无法根据工作负载特征调整并行粒度  

研究缺口总结：  
1. **动态适应性不足**：现有优化方法多为静态策略，难以实时响应硬件特性和工作负载变化。  
2. **注意力计算特异性缺失**：传统微内核和并行技术未针对注意力模块的多步骤融合、不规则内存访问等特性优化。  
3. **层次化权衡不足**：在数据局部性、并行效率与硬件利用率之间缺乏系统性协同优化。